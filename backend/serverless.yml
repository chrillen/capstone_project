service:
  name: srvls-passwords-app


package:
    excludeDevDependencies: false


plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    JWT_SECRET: 'helloworld'
    USERS_TABLE: Users-${self:provider.stage}
    PASSWORDS_TABLE: Passwords-${self:provider.stage}
    PASSWORDS_ID_INDEX: PasswordsIdIndex
    PASSWORDS_ATTACHMENTS_S3_BUCKET: password-files-33xx-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: PasswordManager API
        description: Serverless application for saving passwords
    models:
      - name: PasswordCreateRequest
        contentType: application/json
        schema: ${file(models/create-password-request.json)}
      - name: PasswordUpdateRequest
        contentType: application/json
        schema: ${file(models/update-password-request.json)}
      - name: UserCreateRequest
        contentType: application/json
        schema: ${file(models/create-user-request.json)}

functions:  
  AuthCustom:
    handler: src/lambda/auth/customAuthorizer.handler

  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Create a new user
            requestModels:
              'application/json': UserCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE} 
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  
  LoginUser:
    handler: src/lambda/http/loginUser.handler
    events:
      - http:
          method: post
          path: users/login
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Login a user
            description: Login a new user
            requestModels:
              'application/json': UserCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE} 
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GetPasswords:
    handler: src/lambda/http/getPasswords.handler
    events:
      - http:
          method: get
          path: passwords
          cors: true
          authorizer: AuthCustom
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}/index/${self:provider.environment.PASSWORDS_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - ssm:GetParameter
          - kms:Decrypt
        Resource: "*"
  
  CreatePassword:
    handler: src/lambda/http/createPassword.handler
    events:
      - http:
          method: post
          path: passwords
          cors: true
          authorizer: AuthCustom
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new password item
            description: Create a new password item
            requestModels:
              'application/json': PasswordCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE} 
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - ssm:PutParameter
          - ssm:GetParameter
          - kms:Decrypt
        Resource: "*"

  UpdatePassword:
    handler: src/lambda/http/updatePassword.handler
    events:
      - http:
          method: patch
          path: passwords/{passwordId}
          cors: true
          authorizer: AuthCustom
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing password item
            description: Update an existing password item
            requestModels:
              'application/json': PasswordUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - ssm:PutParameter
          - ssm:GetParameter
          - kms:Decrypt
        Resource: "*"

  DeletePassword:
    handler: src/lambda/http/deletePassword.handler
    events:
      - http:
          method: delete
          path: passwords/{passwordId}
          cors: true
          authorizer: AuthCustom
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: passwords/{passwordId}/attachment
          cors: true
          authorizer: AuthCustom
    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.PASSWORDS_ATTACHMENTS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
  
    PasswordsAttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PASSWORDS_ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PASSWORDS_ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref PasswordsAttachmentBucket
    
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

    PasswordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: passwordId
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: passwordId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PASSWORDS_TABLE}
        LocalSecondaryIndexes:
            - IndexName: ${self:provider.environment.PASSWORDS_ID_INDEX}
              KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: title
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL # What attributes will be copied to an index
